// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏—Ä–ª—è–Ω–¥–∞–º–∏
import { getRandomElement } from './utils.js';
import { randomBrightColor } from './utils.js';

let garlandAmplitude = 40;
let resizeTimeout;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
function calculateSymbolCount() {
    const screenWidth = window.innerWidth;
    // –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∫–∞–∂–¥—ã–µ 40 –ø–∏–∫—Å–µ–ª–µ–π
    return Math.floor(screenWidth / 40);
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤
function generateSymbols(count) {
    const chars = ['‚ùá', '‚úø', '‚ùÑ', '‚≠ê', '‚ú®', 'üéÑ', 'üéÅ', 'üîî', '‚ú¶'];
    const arr = [];
    for (let i=0; i<count; i++) {
        const el = document.createElement('span');
        el.textContent = getRandomElement(chars);
        el.style.color = randomBrightColor();
        el.style.fontSize = Math.random() < 0.5 ? '20px' : '30px';
        el.style.textShadow = `0 0 5px ${el.style.color}`;
        arr.push(el);
    }
    return arr;
}

// –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥—É–≥–æ–π
function positionArcSymbols(container, symbols, arcDirection='down') {
    // arcDirection = 'down' –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –¥—É–≥–∏, 'up' –¥–ª—è –Ω–∏–∂–Ω–µ–π
    container.style.position = 'fixed';
    container.style.left = '0';
    container.style.height = '80px';
    container.style.width = '100%';
    container.style.overflow = 'visible';
    container.style.pointerEvents = 'none';
    container.style.position = 'fixed';

    const count = symbols.length;
    const containerWidth = window.innerWidth;
    // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –∞–º–ø–ª–∏—Ç—É–¥–∞ –¥—É–≥–∏
    let baseY = 0;

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–≥ (–Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ)
    const numArcs = 5;

    for (let i = 0; i < count; i++) {
        const symbol = symbols[i];
        const norm = i / (count - 1);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –¥—É–≥–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–∏–º–≤–æ–ª
        const arcIndex = Math.floor(norm * numArcs);
        // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥—É–≥–∏
        const arcNorm = (norm * numArcs) % 1;

        // –°–∏–Ω—É—Å–æ–∏–¥–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        const sineVal = Math.sin(Math.PI * arcNorm);

        let topPos;
        if (arcDirection === 'down') {
            topPos = baseY + garlandAmplitude * sineVal;
        } else {
            topPos = baseY - garlandAmplitude * sineVal;
        }

        const segmentWidth = containerWidth / numArcs;
        const leftPos = (arcIndex * segmentWidth) + (arcNorm * segmentWidth);

        symbol.style.position = 'absolute';
        symbol.style.top = topPos + 'px';
        symbol.style.left = leftPos + 'px';
        container.appendChild(symbol);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∏—Ä–ª—è–Ω–¥
export function updateGarlands() {
    const topDec = document.getElementById('topDecoration');
    const bottomDec = document.getElementById('bottomDecoration');
    if (!topDec || !bottomDec) return;

    const symbolCount = calculateSymbolCount();
    const topSymbols = generateSymbols(symbolCount);
    const bottomSymbols = generateSymbols(symbolCount);

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    topDec.innerHTML = '';
    bottomDec.innerHTML = '';

    // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    positionArcSymbols(topDec, topSymbols, 'down');
    positionArcSymbols(bottomDec, bottomSymbols, 'up');
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã –≥–∏—Ä–ª—è–Ω–¥
export function increaseGarlandsBend() {
    garlandAmplitude += 10;
    if (garlandAmplitude > 120) garlandAmplitude = 40;
    updateGarlands();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏—Ä–ª—è–Ω–¥
export function initGarlands() {
    updateGarlands();
    window.addEventListener('resize', () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(updateGarlands, 250);
    });
} 